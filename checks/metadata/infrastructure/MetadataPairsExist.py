from __future__ import annotations

from typing import TYPE_CHECKING, List, Any
import os, json, re

from checkov.terraform.checks.resource.base_resource_check import BaseResourceCheck
from checkov.common.models.enums import CheckResult, CheckCategories

class MetadataPairChecker(BaseResourceCheck):

    def __init__(self, metadata_to_check: List[dict], resource_types_to_check: List[dict]) -> None:
        name = "Ensure that specified the IaC (Terraform) resource has the required metadata pairs (Azure tags / GCP labels)"
        id = "CKV_TF_METADATA_CHECK"

        self.metadata_to_check = metadata_to_check
        self.resource_types_to_check = resource_types_to_check

        supported_resources = []
        for csp,csp_supp in resource_types_to_check.items():
            if 'supported_types' in csp_supp:
                supported_resources = supported_resources + csp_supp['supported_types']
            

        # CheckCategories are defined in models/enums.py
        categories = (CheckCategories.CONVENTION,)
        guideline = "This is a custom policy. Powered by Checkov and Python."

        super().__init__(name=name, id=id, categories=categories, supported_resources=supported_resources, guideline=guideline)

    def scan_resource_conf(self, conf: dict[str, list[Any]]) -> CheckResult:
         
        resource_type = self.entity_type

        for type_to_check_keys,type_to_check_value in self.resource_types_to_check.items():
            for key in type_to_check_value['keys']:
                if resource_type.startswith(key):
                    description = type_to_check_value['description']
                    tag_paths = type_to_check_value['tag_paths']
                    break

        metadata_pairs = {}

        open("scan_resource_metadata.log", 'w').close()

        with open("scan_resource_metadata.log", '+a') as log_file:

            log_file.write("\nValidating against:\n")
            json.dump(self.metadata_to_check, log_file, indent=4)

            for tag_path in tag_paths:

                try:   
                    tags = conf.get(tag_path)
                except:
                    self.details.append("No METADATA in path "+tag_path+" found. CONF: "+str(conf))  
                    log_file.write("\nNo METADATA in path "+tag_path+" found. CONF: "+str(conf)+"\n")
                
                # List of tags [{"Key":"Value"}] - I think
                if tags and isinstance(tags, list):
                    for tag in tags:
                        try:
                            for k,v in tag.items():
                                metadata_pairs[k] = v
                                
                            log_file.write("\nFrom " + str(metadata_pairs) + ". Checking all tag_paths specified.\n")

                        except:
                            self.details.append("Something went wrong obtaining the metadata key/value pair from " + str(tag) + ". Checking all tag_paths specified before failing.")  
                            log_file.write("\nSomething went wrong obtaining the metadata key/value pair: from " + str(tag) + ". Checking all tag_paths specified before failing.\n")

                else:          
                    self.details.append("Something went wrong obtaining the metadata key/value pair from " + str(tag_path) + ". Checking all tag_paths specified before failing.")  
                    log_file.write("\nSomething went wrong obtaining the metadata key/value pair: from " + str(tag_path) + ". Checking all tag_paths specified before failing.\n")  
                    continue
            
                for metadata_to_check_key, metadata_to_check in self.metadata_to_check.items():

                    if metadata_to_check_key not in metadata_pairs.keys():
                        self.details.append("Metadata "+metadata_to_check_key+" is not defined. FAIL")
                        log_file.write("\nMetadata "+metadata_to_check_key+" is not defined. FAIL\n")              
                        return CheckResult.FAILED
                    
                    allowed_values_pattern = re.compile(r""+metadata_to_check['allowed_values'])
                    if allowed_values_pattern.match(metadata_pairs[metadata_to_check_key]):
                        log_file.write("\nMetadata "+metadata_to_check_key+" defined and within allowed values "+metadata_to_check['allowed_values']+".\n") 
                        continue
                    else:
                        self.details.append("Metadata "+metadata_to_check_key+" exists but does not match allowed values "+metadata_to_check['allowed_values'] + ".\nFAIL")
                        log_file.write("\nMetadata "+metadata_to_check_key+" exists but does not match allowed values "+metadata_to_check['allowed_values']+".\nFAIL\n")  
                        return CheckResult.FAILED
                    
                log_file.write("\nAll Metadatas PASSED validation.\n") 

        return CheckResult.PASSED

file_name = 'policy.json'

default_metadata_pairs = {
    "maintainer": {
        "allowed_values": ".*",
        "version": "1.0",
        "description": "A sample metadata pair - Any value accepted. To override this, create a "+file_name+" file in the working directory checkov runs from."
    }, 
    "maintainer_specific":{
        "allowed_values": "^[\w\.-]+@[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$",
        "version": "1.0",
        "description": "A sample metadata pair - Specific regex. To override this, create a "+file_name+" file in the working directory checkov runs from."
    },
    "random_label_key":{
        "allowed_values": "random_label_value",
        "version": "1.0",
        "description": "A sample metadata pair - This will fail (unless you do have that unspecified_random_label). To override this, create a "+file_name+" file in the working directory checkov runs from."
    }
}

if os.path.exists(file_name):
    # If the file exists, open and read the JSON data
    with open(file_name, 'r') as file:
        try:
            metadata_to_check = json.load(file)
        except:
            metadata_to_check = default_metadata_pairs
else:
    # If the file doesn't exist, use the default dictionary
    metadata_to_check = default_metadata_pairs

resource_type_file_name = 'cloud_specific_configurations.json'

default_resources_types = {
    "azure": {
        "keys": ["arm", "az", "azure", "azurerm"],
        "description": "Resources to check for metadata pairs (Azure). To override this, create a "+resource_type_file_name+" file in the working directory checkov runs from.",
        "tag_paths": ["labels","tags"],
        "supported_types": [
            "azurerm_api_management",
            "azurerm_api_management_api",
            "azurerm_api_management_api_operation",
            "azurerm_api_management_api_operation_policy",
            "azurerm_api_management_api_policy",
            "azurerm_api_management_api_schema",
            "azurerm_api_management_api_version_set",
            "azurerm_api_management_authorization_server",
            "azurerm_api_management_backend",
            "azurerm_api_management_certificate",
            "azurerm_api_management_diagnostic",
            "azurerm_api_management_group",
            "azurerm_api_management_group_user",
            "azurerm_api_management_identity_provider_aad",
            "azurerm_api_management_identity_provider_facebook",
            "azurerm_api_management_identity_provider_google",
            "azurerm_api_management_identity_provider_microsoft",
            "azurerm_api_management_identity_provider_twitter",
            "azurerm_api_management_logger",
            "azurerm_api_management_named_value",
            "azurerm_api_management_openid_connect_provider",
            "azurerm_api_management_product",
            "azurerm_api_management_product_api",
            "azurerm_api_management_product_group",
            "azurerm_api_management_product_policy",
            "azurerm_api_management_property",
            "azurerm_api_management_subscription",
            "azurerm_api_management_user",
            "azurerm_analysis_services_server",
            "azurerm_app_configuration",
            "azurerm_app_service",
            "azurerm_app_service_active_slot",
            "azurerm_app_service_certificate",
            "azurerm_app_service_certificate_order",
            "azurerm_app_service_custom_hostname_binding",
            "azurerm_app_service_environment",
            "azurerm_app_service_hybrid_connection",
            "azurerm_app_service_plan",
            "azurerm_app_service_slot",
            "azurerm_app_service_slot_virtual_network_swift_connection",
            "azurerm_app_service_source_control_token",
            "azurerm_app_service_virtual_network_swift_connection",
            "azurerm_function_app",
            "azurerm_function_app_slot",
            "azurerm_application_insights",
            "azurerm_application_insights_analytics_item",
            "azurerm_application_insights_api_key",
            "azurerm_application_insights_web_test",
            "azurerm_role_assignment",
            "azurerm_role_definition",
            "azurerm_user_assigned_identity",
            "azurerm_automation_account",
            "azurerm_automation_certificate",
            "azurerm_automation_connection",
            "azurerm_automation_connection_certificate",
            "azurerm_automation_connection_classic_certificate",
            "azurerm_automation_connection_service_principal",
            "azurerm_automation_credential",
            "azurerm_automation_dsc_configuration",
            "azurerm_automation_dsc_nodeconfiguration",
            "azurerm_automation_job_schedule",
            "azurerm_automation_module",
            "azurerm_automation_runbook",
            "azurerm_automation_schedule",
            "azurerm_automation_variable_bool",
            "azurerm_automation_variable_datetime",
            "azurerm_automation_variable_int",
            "azurerm_automation_variable_string",
            "azurerm_resource_group",
            "azurerm_batch_account",
            "azurerm_batch_application",
            "azurerm_batch_certificate",
            "azurerm_batch_pool",
            "azurerm_blueprint_assignment",
            "azurerm_bot_channel_directline",
            "azurerm_bot_channel_email",
            "azurerm_bot_channel_ms_teams",
            "azurerm_bot_channel_slack",
            "azurerm_bot_channels_registration",
            "azurerm_bot_connection",
            "azurerm_bot_web_app",
            "azurerm_cdn_endpoint",
            "azurerm_cdn_profile",
            "azurerm_cognitive_account",
            "azurerm_availability_set",
            "azurerm_dedicated_host",
            "azurerm_dedicated_host_group",
            "azurerm_disk_encryption_set",
            "azurerm_image",
            "azurerm_linux_virtual_machine",
            "azurerm_linux_virtual_machine_scale_set",
            "azurerm_managed_disk",
            "azurerm_marketplace_agreement",
            "azurerm_orchestrated_virtual_machine_scale_set",
            "azurerm_proximity_placement_group",
            "azurerm_shared_image",
            "azurerm_shared_image_gallery",
            "azurerm_shared_image_version",
            "azurerm_snapshot",
            "azurerm_virtual_machine",
            "azurerm_virtual_machine_data_disk_attachment",
            "azurerm_virtual_machine_extension",
            "azurerm_virtual_machine_scale_set",
            "azurerm_virtual_machine_scale_set_extension",
            "azurerm_windows_virtual_machine",
            "azurerm_windows_virtual_machine_scale_set",
            "azurerm_container_group",
            "azurerm_container_registry",
            "azurerm_container_registry_webhook",
            "azurerm_kubernetes_cluster",
            "azurerm_kubernetes_cluster_node_pool",
            "azurerm_cosmosdb_account",
            "azurerm_cosmosdb_cassandra_keyspace",
            "azurerm_cosmosdb_gremlin_database",
            "azurerm_cosmosdb_gremlin_graph",
            "azurerm_cosmosdb_mongo_collection",
            "azurerm_cosmosdb_mongo_database",
            "azurerm_cosmosdb_sql_container",
            "azurerm_cosmosdb_sql_database",
            "azurerm_cosmosdb_table",
            "azurerm_cost_management_export_resource_group",
            "azurerm_custom_provider",
            "azurerm_dns_a_record",
            "azurerm_dns_aaaa_record",
            "azurerm_dns_caa_record",
            "azurerm_dns_cname_record",
            "azurerm_dns_mx_record",
            "azurerm_dns_ns_record",
            "azurerm_dns_ptr_record",
            "azurerm_dns_srv_record",
            "azurerm_dns_txt_record",
            "azurerm_dns_zone",
            "azurerm_kusto_attached_database_configuration",
            "azurerm_kusto_cluster",
            "azurerm_kusto_cluster_customer_managed_key",
            "azurerm_kusto_cluster_principal_assignment",
            "azurerm_kusto_database",
            "azurerm_kusto_database_principal",
            "azurerm_kusto_database_principal_assignment",
            "azurerm_kusto_eventhub_data_connection",
            "azurerm_data_factory",
            "azurerm_data_factory_dataset_azure_blob",
            "azurerm_data_factory_dataset_cosmosdb_sqlapi",
            "azurerm_data_factory_dataset_delimited_text",
            "azurerm_data_factory_dataset_http",
            "azurerm_data_factory_dataset_json",
            "azurerm_data_factory_dataset_mysql",
            "azurerm_data_factory_dataset_postgresql",
            "azurerm_data_factory_dataset_sql_server_table",
            "azurerm_data_factory_integration_runtime_managed",
            "azurerm_data_factory_integration_runtime_self_hosted",
            "azurerm_data_factory_linked_service_azure_blob_storage",
            "azurerm_data_factory_linked_service_azure_file_storage",
            "azurerm_data_factory_linked_service_azure_function",
            "azurerm_data_factory_linked_service_cosmosdb",
            "azurerm_data_factory_linked_service_data_lake_storage_gen2",
            "azurerm_data_factory_linked_service_key_vault",
            "azurerm_data_factory_linked_service_mysql",
            "azurerm_data_factory_linked_service_postgresql",
            "azurerm_data_factory_linked_service_sftp",
            "azurerm_data_factory_linked_service_sql_server",
            "azurerm_data_factory_linked_service_web",
            "azurerm_data_factory_pipeline",
            "azurerm_data_factory_trigger_schedule",
            "azurerm_data_lake_analytics_account",
            "azurerm_data_lake_analytics_firewall_rule",
            "azurerm_data_lake_store",
            "azurerm_data_lake_store_file",
            "azurerm_data_lake_store_firewall_rule",
            "azurerm_data_share",
            "azurerm_data_share_account",
            "azurerm_data_share_dataset_blob_storage",
            "azurerm_data_share_dataset_data_lake_gen1",
            "azurerm_mariadb_configuration",
            "azurerm_mariadb_database",
            "azurerm_mariadb_firewall_rule",
            "azurerm_mariadb_server",
            "azurerm_mariadb_virtual_network_rule",
            "azurerm_mssql_database",
            "azurerm_mssql_database_vulnerability_assessment_rule_baseline",
            "azurerm_mssql_elasticpool",
            "azurerm_mssql_server",
            "azurerm_mssql_server_security_alert_policy",
            "azurerm_mssql_server_vulnerability_assessment",
            "azurerm_mssql_virtual_machine",
            "azurerm_mysql_active_directory_administrator",
            "azurerm_mysql_configuration",
            "azurerm_mysql_database",
            "azurerm_mysql_firewall_rule",
            "azurerm_mysql_server",
            "azurerm_mysql_virtual_network_rule",
            "azurerm_postgresql_active_directory_administrator",
            "azurerm_postgresql_configuration",
            "azurerm_postgresql_database",
            "azurerm_postgresql_firewall_rule",
            "azurerm_postgresql_server",
            "azurerm_postgresql_virtual_network_rule",
            "azurerm_sql_active_directory_administrator",
            "azurerm_sql_database",
            "azurerm_sql_elasticpool",
            "azurerm_sql_failover_group",
            "azurerm_sql_firewall_rule",
            "azurerm_sql_server",
            "azurerm_sql_virtual_network_rule",
            "azurerm_database_migration_project",
            "azurerm_database_migration_service",
            "azurerm_databricks_workspace",
            "azurerm_dev_test_global_vm_shutdown_schedule",
            "azurerm_dev_test_lab",
            "azurerm_dev_test_linux_virtual_machine",
            "azurerm_dev_test_policy",
            "azurerm_dev_test_schedule",
            "azurerm_dev_test_virtual_network",
            "azurerm_dev_test_windows_virtual_machine",
            "azurerm_devspace_controller",
            "azurerm_hdinsight_hadoop_cluster",
            "azurerm_hdinsight_hbase_cluster",
            "azurerm_hdinsight_interactive_query_cluster",
            "azurerm_hdinsight_kafka_cluster",
            "azurerm_hdinsight_ml_services_cluster",
            "azurerm_hdinsight_rserver_cluster",
            "azurerm_hdinsight_spark_cluster",
            "azurerm_hdinsight_storm_cluster",
            "azurerm_dedicated_hardware_security_module",
            "azurerm_healthcare_service",
            "azurerm_iotcentral_application",
            "azurerm_iothub",
            "azurerm_iothub_consumer_group",
            "azurerm_iothub_dps",
            "azurerm_iothub_dps_certificate",
            "azurerm_iothub_dps_shared_access_policy",
            "azurerm_iothub_shared_access_policy",
            "azurerm_key_vault",
            "azurerm_key_vault_access_policy",
            "azurerm_key_vault_certificate",
            "azurerm_key_vault_certificate_issuer",
            "azurerm_key_vault_key",
            "azurerm_key_vault_secret",
            "azurerm_lb",
            "azurerm_lb_backend_address_pool",
            "azurerm_lb_nat_pool",
            "azurerm_lb_nat_rule",
            "azurerm_lb_outbound_rule",
            "azurerm_lb_probe",
            "azurerm_lb_rule",
            "azurerm_log_analytics_datasource_windows_event",
            "azurerm_log_analytics_datasource_windows_performance_counter",
            "azurerm_log_analytics_linked_service",
            "azurerm_log_analytics_solution",
            "azurerm_log_analytics_workspace",
            "azurerm_logic_app_action_custom",
            "azurerm_logic_app_action_http",
            "azurerm_logic_app_integration_account",
            "azurerm_logic_app_trigger_custom",
            "azurerm_logic_app_trigger_http_request",
            "azurerm_logic_app_trigger_recurrence",
            "azurerm_logic_app_workflow",
            "azurerm_machine_learning_workspace",
            "azurerm_maintenance_assignment_dedicated_host",
            "azurerm_maintenance_assignment_virtual_machine",
            "azurerm_maintenance_configuration",
            "azurerm_managed_application",
            "azurerm_managed_application_definition",
            "azurerm_management_group",
            "azurerm_management_lock",
            "azurerm_maps_account",
            "azurerm_media_services_account",
            "azurerm_eventgrid_domain",
            "azurerm_eventgrid_domain_topic",
            "azurerm_eventgrid_event_subscription",
            "azurerm_eventgrid_topic",
            "azurerm_eventhub",
            "azurerm_eventhub_authorization_rule",
            "azurerm_eventhub_cluster",
            "azurerm_eventhub_consumer_group",
            "azurerm_eventhub_namespace",
            "azurerm_eventhub_namespace_authorization_rule",
            "azurerm_eventhub_namespace_disaster_recovery_config",
            "azurerm_iothub_endpoint_eventhub",
            "azurerm_iothub_endpoint_servicebus_queue",
            "azurerm_iothub_endpoint_servicebus_topic",
            "azurerm_iothub_endpoint_storage_container",
            "azurerm_iothub_fallback_route",
            "azurerm_iothub_route",
            "azurerm_notification_hub",
            "azurerm_notification_hub_authorization_rule",
            "azurerm_notification_hub_namespace",
            "azurerm_relay_hybrid_connection",
            "azurerm_relay_namespace",
            "azurerm_servicebus_namespace",
            "azurerm_servicebus_namespace_authorization_rule",
            "azurerm_servicebus_namespace_network_rule_set",
            "azurerm_servicebus_queue",
            "azurerm_servicebus_queue_authorization_rule",
            "azurerm_servicebus_subscription",
            "azurerm_servicebus_subscription_rule",
            "azurerm_servicebus_topic",
            "azurerm_servicebus_topic_authorization_rule",
            "azurerm_signalr_service",
            "azurerm_spatial_anchors_account",
            "azurerm_monitor_action_group",
            "azurerm_monitor_action_rule_action_group",
            "azurerm_monitor_action_rule_suppression",
            "azurerm_monitor_activity_log_alert",
            "azurerm_monitor_autoscale_setting",
            "azurerm_monitor_diagnostic_setting",
            "azurerm_monitor_log_profile",
            "azurerm_monitor_metric_alert",
            "azurerm_monitor_scheduled_query_rules_alert",
            "azurerm_monitor_scheduled_query_rules_log",
            "azurerm_netapp_account",
            "azurerm_netapp_pool",
            "azurerm_netapp_snapshot",
            "azurerm_netapp_volume",
            "azurerm_application_gateway",
            "azurerm_application_security_group",
            "azurerm_bastion_host",
            "azurerm_express_route_circuit",
            "azurerm_express_route_circuit_authorization",
            "azurerm_express_route_circuit_peering",
            "azurerm_express_route_gateway",
            "azurerm_firewall",
            "azurerm_firewall_application_rule_collection",
            "azurerm_firewall_nat_rule_collection",
            "azurerm_firewall_network_rule_collection",
            "azurerm_frontdoor",
            "azurerm_frontdoor_custom_https_configuration",
            "azurerm_frontdoor_firewall_policy",
            "azurerm_local_network_gateway",
            "azurerm_nat_gateway",
            "azurerm_nat_gateway_public_ip_association",
            "azurerm_network_ddos_protection_plan",
            "azurerm_network_interface",
            "azurerm_network_interface_application_gateway_backend_address_pool_association",
            "azurerm_network_interface_application_security_group_association",
            "azurerm_network_interface_backend_address_pool_association",
            "azurerm_network_interface_nat_rule_association",
            "azurerm_network_interface_security_group_association",
            "azurerm_network_packet_capture",
            "azurerm_network_profile",
            "azurerm_network_security_group",
            "azurerm_network_security_rule",
            "azurerm_network_watcher",
            "azurerm_network_watcher_flow_log",
            "azurerm_packet_capture",
            "azurerm_point_to_site_vpn_gateway",
            "azurerm_private_endpoint",
            "azurerm_private_link_service",
            "azurerm_public_ip",
            "azurerm_public_ip_prefix",
            "azurerm_route",
            "azurerm_route_filter",
            "azurerm_route_table",
            "azurerm_traffic_manager_endpoint",
            "azurerm_traffic_manager_profile",
            "azurerm_virtual_hub",
            "azurerm_virtual_hub_connection",
            "azurerm_virtual_network",
            "azurerm_virtual_network_gateway",
            "azurerm_virtual_network_gateway_connection",
            "azurerm_virtual_network_peering",
            "azurerm_virtual_wan",
            "azurerm_vpn_gateway",
            "azurerm_vpn_server_configuration",
            "azurerm_web_application_firewall_policy",
            "azurerm_policy_assignment",
            "azurerm_policy_definition",
            "azurerm_policy_remediation",
            "azurerm_policy_set_definition",
            "azurerm_dashboard",
            "azurerm_powerbi_embedded",
            "azurerm_private_dns_a_record",
            "azurerm_private_dns_aaaa_record",
            "azurerm_private_dns_cname_record",
            "azurerm_private_dns_mx_record",
            "azurerm_private_dns_ptr_record",
            "azurerm_private_dns_srv_record",
            "azurerm_private_dns_txt_record",
            "azurerm_private_dns_zone",
            "azurerm_private_dns_zone_virtual_network_link",
            "azurerm_backup_container_storage_account",
            "azurerm_backup_policy_file_share",
            "azurerm_backup_policy_vm",
            "azurerm_backup_protected_file_share",
            "azurerm_backup_protected_vm",
            "azurerm_recovery_services_vault",
            "azurerm_site_recovery_fabric",
            "azurerm_site_recovery_network_mapping",
            "azurerm_site_recovery_protection_container",
            "azurerm_site_recovery_protection_container_mapping",
            "azurerm_site_recovery_replicated_vm",
            "azurerm_site_recovery_replication_policy",
            "azurerm_redis_cache",
            "azurerm_redis_firewall_rule",
            "azurerm_search_service",
            "azurerm_advanced_threat_protection",
            "azurerm_security_center_contact",
            "azurerm_security_center_subscription_pricing",
            "azurerm_security_center_workspace",
            "azurerm_sentinel_alert_rule_ms_security_incident",
            "azurerm_sentinel_alert_rule_scheduled",
            "azurerm_service_fabric_cluster",
            "azurerm_spring_cloud_app",
            "azurerm_spring_cloud_service",
            "azurerm_hpc_cache",
            "azurerm_hpc_cache_blob_target",
            "azurerm_hpc_cache_nfs_target",
            "azurerm_storage_account",
            "azurerm_storage_account_customer_managed_key",
            "azurerm_storage_account_network_rules",
            "azurerm_storage_blob",
            "azurerm_storage_container",
            "azurerm_storage_data_lake_gen2_filesystem",
            "azurerm_storage_management_policy",
            "azurerm_storage_queue",
            "azurerm_storage_share",
            "azurerm_storage_share_directory",
            "azurerm_storage_table",
            "azurerm_storage_table_entity",
            "azurerm_stream_analytics_function_javascript_udf",
            "azurerm_stream_analytics_job",
            "azurerm_stream_analytics_output_blob",
            "azurerm_stream_analytics_output_eventhub",
            "azurerm_stream_analytics_output_mssql",
            "azurerm_stream_analytics_output_servicebus_queue",
            "azurerm_stream_analytics_output_servicebus_topic",
            "azurerm_stream_analytics_reference_input_blob",
            "azurerm_stream_analytics_stream_input_blob",
            "azurerm_stream_analytics_stream_input_eventhub",
            "azurerm_stream_analytics_stream_input_iothub",
            "azurerm_synapse_workspace",
            "azurerm_template_deployment",
            "azurerm_iot_time_series_insights_access_policy",
            "azurerm_iot_time_series_insights_reference_data_set",
            "azurerm_iot_time_series_insights_standard_environment"
        ]        
    },
    "google": {
        "keys": ["gcp", "google", "googlecloud", "azure_rm"],
        "description": "Resources to check for metadata pairs (GCP). To override this, create a "+resource_type_file_name+" file in the working directory checkov runs from.",
        "tag_paths": ["labels"],
        # WARNING: Obtained from ChatGPT - "give me a list of resource types that support GCP labels in the format google_tfresource_type"
        "supported_types": [
            "google_compute_instance",
            "google_storage_bucket",
            "google_bigquery_dataset",
            "google_pubsub_topic",
            "google_sql_database_instance",
            "google_container_cluster",
            "google_cloudfunctions_function",
            "google_cloud_run_service",
            "google_dataproc_cluster",
            "google_filestore_instance",
            "google_compute_disk",
            "google_compute_firewall",
            "google_compute_subnetwork",
            "google_compute_network",
            "google_compute_forwarding_rule",
            "google_compute_instance_template",
            "google_compute_router",
            "google_compute_router_nat",
            "google_compute_instance_group",
            "google_compute_instance_group_manager",
            "google_compute_target_instance",
            "google_kms_key_ring",
            "google_kms_crypto_key",
            "google_spanner_instance",
            "google_spanner_database",
            "google_cloud_scheduler_job",
            "google_cloudbuild_trigger",
            "google_dataflow_job",
            "google_datafusion_instance",
            "google_bigtable_instance",
            "google_bigtable_table"
        ]
    },
    "aws": {
        "keys": ["aws", "amazon", "amazonwebservices", "amazonws"],
        "description": "Resources to check for metadata pairs (AWS). To override this, create a "+resource_type_file_name+" file in the working directory checkov runs from.",
        "tag_paths": ["tags"],
        "supported_types": [
            "aws",
            "aws_root",
            "aws_root_access_key",
            "aws_acm_certificate",
            "aws_acm_certificate_validation",
            "aws_acmpca_certificate_authority",
            "aws_api_gateway_account",
            "aws_api_gateway_api_key",
            "aws_api_gateway_authorizer",
            "aws_api_gateway_base_path_mapping",
            "aws_api_gateway_client_certificate",
            "aws_api_gateway_deployment",
            "aws_api_gateway_documentation_part",
            "aws_api_gateway_documentation_version",
            "aws_api_gateway_domain_name",
            "aws_api_gateway_gateway_response",
            "aws_api_gateway_integration",
            "aws_api_gateway_integration_response",
            "aws_api_gateway_method",
            "aws_api_gateway_method_response",
            "aws_api_gateway_method_settings",
            "aws_api_gateway_model",
            "aws_api_gateway_request_validator",
            "aws_api_gateway_resource",
            "aws_api_gateway_rest_api",
            "aws_api_gateway_stage",
            "aws_api_gateway_usage_plan",
            "aws_api_gateway_usage_plan_key",
            "aws_api_gateway_vpc_link",
            "aws_apigatewayv2_api",
            "aws_apigatewayv2_api_mapping",
            "aws_apigatewayv2_authorizer",
            "aws_apigatewayv2_deployment",
            "aws_apigatewayv2_domain_name",
            "aws_apigatewayv2_integration",
            "aws_apigatewayv2_integration_response",
            "aws_apigatewayv2_model",
            "aws_apigatewayv2_route",
            "aws_apigatewayv2_route_response",
            "aws_apigatewayv2_stage",
            "aws_apigatewayv2_vpc_link",
            "aws_accessanalyzer_analyzer",
            "aws_appmesh_mesh",
            "aws_appmesh_route",
            "aws_appmesh_virtual_node",
            "aws_appmesh_virtual_router",
            "aws_appmesh_virtual_service",
            "aws_appsync_api_key",
            "aws_appsync_datasource",
            "aws_appsync_function",
            "aws_appsync_graphql_api",
            "aws_appsync_resolver",
            "aws_appautoscaling_policy",
            "aws_appautoscaling_scheduled_action",
            "aws_appautoscaling_target",
            "aws_athena_database",
            "aws_athena_named_query",
            "aws_athena_workgroup",
            "aws_autoscaling_attachment",
            "aws_autoscaling_group",
            "aws_autoscaling_lifecycle_hook",
            "aws_autoscaling_notification",
            "aws_autoscaling_policy",
            "aws_autoscaling_schedule",
            "aws_backup_plan",
            "aws_backup_selection",
            "aws_backup_vault",
            "aws_batch_compute_environment",
            "aws_batch_job_definition",
            "aws_batch_job_queue",
            "aws_budgets_budget",
            "aws_cloud9_environment_ec2",
            "aws_cloudformation_stack",
            "aws_cloudformation_stack_set",
            "aws_cloudformation_stack_set_instance",
            "aws_cloudfront_distribution",
            "aws_cloudfront_origin_access_identity",
            "aws_cloudfront_public_key",
            "aws_cloudhsm_v2_cluster",
            "aws_cloudhsm_v2_hsm",
            "aws_cloudtrail",
            "aws_cloudwatch_dashboard",
            "aws_cloudwatch_event_permission",
            "aws_cloudwatch_event_rule",
            "aws_cloudwatch_event_target",
            "aws_cloudwatch_log_destination",
            "aws_cloudwatch_log_destination_policy",
            "aws_cloudwatch_log_group",
            "aws_cloudwatch_log_metric_filter",
            "aws_cloudwatch_log_resource_policy",
            "aws_cloudwatch_log_stream",
            "aws_cloudwatch_log_subscription_filter",
            "aws_cloudwatch_metric_alarm",
            "aws_codebuild_project",
            "aws_codebuild_source_credential",
            "aws_codebuild_webhook",
            "aws_codecommit_repository",
            "aws_codecommit_trigger",
            "aws_codedeploy_app",
            "aws_codedeploy_deployment_config",
            "aws_codedeploy_deployment_group",
            "aws_codepipeline",
            "aws_codepipeline_webhook",
            "aws_codestarnotifications_notification_rule",
            "aws_cognito_identity_pool",
            "aws_cognito_identity_pool_roles_attachment",
            "aws_cognito_identity_provider",
            "aws_cognito_resource_server",
            "aws_cognito_user_group",
            "aws_cognito_user_pool",
            "aws_cognito_user_pool_client",
            "aws_cognito_user_pool_domain",
            "aws_config_aggregate_authorization",
            "aws_config_config_rule",
            "aws_config_configuration_aggregator",
            "aws_config_configuration_recorder",
            "aws_config_configuration_recorder_status",
            "aws_config_delivery_channel",
            "aws_config_organization_custom_rule",
            "aws_config_organization_managed_rule",
            "aws_cur_report_definition",
            "aws_dlm_lifecycle_policy",
            "aws_datapipeline_pipeline",
            "aws_datasync_agent",
            "aws_datasync_location_efs",
            "aws_datasync_location_nfs",
            "aws_datasync_location_s3",
            "aws_datasync_location_smb",
            "aws_datasync_task",
            "aws_dms_certificate",
            "aws_dms_endpoint",
            "aws_dms_event_subscription",
            "aws_dms_replication_instance",
            "aws_dms_replication_subnet_group",
            "aws_dms_replication_task",
            "aws_devicefarm_project",
            "aws_dx_bgp_peer",
            "aws_dx_connection",
            "aws_dx_connection_association",
            "aws_dx_gateway",
            "aws_dx_gateway_association",
            "aws_dx_gateway_association_proposal",
            "aws_dx_hosted_private_virtual_interface",
            "aws_dx_hosted_private_virtual_interface_accepter",
            "aws_dx_hosted_public_virtual_interface",
            "aws_dx_hosted_public_virtual_interface_accepter",
            "aws_dx_hosted_transit_virtual_interface",
            "aws_dx_hosted_transit_virtual_interface_accepter",
            "aws_dx_lag",
            "aws_dx_private_virtual_interface",
            "aws_dx_public_virtual_interface",
            "aws_dx_transit_virtual_interface",
            "aws_directory_service_conditional_forwarder",
            "aws_directory_service_directory",
            "aws_directory_service_log_subscription",
            "aws_docdb_cluster",
            "aws_docdb_cluster_instance",
            "aws_docdb_cluster_parameter_group",
            "aws_docdb_cluster_snapshot",
            "aws_docdb_subnet_group",
            "aws_dynamodb_global_table",
            "aws_dynamodb_table",
            "aws_dynamodb_table_item",
            "aws_dax_cluster",
            "aws_dax_parameter_group",
            "aws_dax_subnet_group",
            "aws_ami",
            "aws_ami_copy",
            "aws_ami_from_instance",
            "aws_ami_launch_permission",
            "aws_ebs_default_kms_key",
            "aws_ebs_encryption_by_default",
            "aws_ebs_snapshot",
            "aws_ebs_snapshot_copy",
            "aws_ebs_volume",
            "aws_ec2_availability_zone_group",
            "aws_ec2_capacity_reservation",
            "aws_ec2_client_vpn_authorization_rule",
            "aws_ec2_client_vpn_endpoint",
            "aws_ec2_client_vpn_network_association",
            "aws_ec2_client_vpn_route",
            "aws_ec2_fleet",
            "aws_ec2_local_gateway_route",
            "aws_ec2_local_gateway_route_table_vpc_association",
            "aws_ec2_tag",
            "aws_ec2_traffic_mirror_filter",
            "aws_ec2_traffic_mirror_filter_rule",
            "aws_ec2_traffic_mirror_session",
            "aws_ec2_traffic_mirror_target",
            "aws_ec2_transit_gateway",
            "aws_ec2_transit_gateway_peering_attachment",
            "aws_ec2_transit_gateway_peering_attachment_accepter",
            "aws_ec2_transit_gateway_route",
            "aws_ec2_transit_gateway_route_table",
            "aws_ec2_transit_gateway_route_table_association",
            "aws_ec2_transit_gateway_route_table_propagation",
            "aws_ec2_transit_gateway_vpc_attachment",
            "aws_ec2_transit_gateway_vpc_attachment_accepter",
            "aws_eip",
            "aws_eip_association",
            "aws_instance",
            "aws_key_pair",
            "aws_launch_configuration",
            "aws_launch_template",
            "aws_placement_group",
            "aws_snapshot_create_volume_permission",
            "aws_spot_datafeed_subscription",
            "aws_spot_fleet_request",
            "aws_spot_instance_request",
            "aws_volume_attachment",
            "aws_ecr_lifecycle_policy",
            "aws_ecr_repository",
            "aws_ecr_repository_policy",
            "aws_ecs_capacity_provider",
            "aws_ecs_cluster",
            "aws_ecs_service",
            "aws_ecs_task_definition",
            "aws_efs_access_point",
            "aws_efs_file_system",
            "aws_efs_file_system_policy",
            "aws_efs_mount_target",
            "aws_eks_cluster",
            "aws_eks_fargate_profile",
            "aws_eks_node_group",
            "aws_elasticache_cluster",
            "aws_elasticache_parameter_group",
            "aws_elasticache_replication_group",
            "aws_elasticache_security_group",
            "aws_elasticache_subnet_group",
            "aws_elastic_beanstalk_application",
            "aws_elastic_beanstalk_application_version",
            "aws_elastic_beanstalk_configuration_template",
            "aws_elastic_beanstalk_environment",
            "aws_app_cookie_stickiness_policy",
            "aws_elb",
            "aws_elb_attachment",
            "aws_lb_cookie_stickiness_policy",
            "aws_lb_ssl_negotiation_policy",
            "aws_load_balancer_backend_server_policy",
            "aws_load_balancer_listener_policy",
            "aws_load_balancer_policy",
            "aws_proxy_protocol_policy",
            "aws_lb",
            "aws_lb_listener",
            "aws_lb_listener_certificate",
            "aws_lb_listener_rule",
            "aws_lb_target_group",
            "aws_lb_target_group_attachment",
            "aws_emr_cluster",
            "aws_emr_instance_group",
            "aws_emr_security_configuration",
            "aws_elastictranscoder_pipeline",
            "aws_elastictranscoder_preset",
            "aws_elasticsearch_domain",
            "aws_elasticsearch_domain_policy",
            "aws_fsx_lustre_file_system",
            "aws_fsx_windows_file_system",
            "aws_fms_admin_account",
            "aws_gamelift_alias",
            "aws_gamelift_build",
            "aws_gamelift_fleet",
            "aws_gamelift_game_session_queue",
            "aws_glacier_vault",
            "aws_glacier_vault_lock",
            "aws_globalaccelerator_accelerator",
            "aws_globalaccelerator_endpoint_group",
            "aws_globalaccelerator_listener",
            "aws_glue_catalog_database",
            "aws_glue_catalog_table",
            "aws_glue_classifier",
            "aws_glue_connection",
            "aws_glue_crawler",
            "aws_glue_job",
            "aws_glue_security_configuration",
            "aws_glue_trigger",
            "aws_glue_workflow",
            "aws_guardduty_detector",
            "aws_guardduty_invite_accepter",
            "aws_guardduty_ipset",
            "aws_guardduty_member",
            "aws_guardduty_organization_admin_account",
            "aws_guardduty_organization_configuration",
            "aws_guardduty_threatintelset",
            "aws_iam_access_key",
            "aws_iam_account_alias",
            "aws_iam_account_password_policy",
            "aws_iam_group",
            "aws_iam_group_membership",
            "aws_iam_group_policy",
            "aws_iam_group_policy_attachment",
            "aws_iam_instance_profile",
            "aws_iam_openid_connect_provider",
            "aws_iam_policy",
            "aws_iam_policy_attachment",
            "aws_iam_policy_document",
            "aws_iam_role",
            "aws_iam_role_policy",
            "aws_iam_role_policy_attachment",
            "aws_iam_saml_provider",
            "aws_iam_server_certificate",
            "aws_iam_service_linked_role",
            "aws_iam_user",
            "aws_iam_user_group_membership",
            "aws_iam_user_login_profile",
            "aws_iam_user_policy",
            "aws_iam_user_policy_attachment",
            "aws_iam_user_ssh_key",
            "aws_inspector_assessment_target",
            "aws_inspector_assessment_template",
            "aws_inspector_resource_group",
            "aws_iot_certificate",
            "aws_iot_policy",
            "aws_iot_policy_attachment",
            "aws_iot_role_alias",
            "aws_iot_thing",
            "aws_iot_thing_principal_attachment",
            "aws_iot_thing_type",
            "aws_iot_topic_rule",
            "aws_kms_alias",
            "aws_kms_ciphertext",
            "aws_kms_external_key",
            "aws_kms_grant",
            "aws_kms_key",
            "aws_kinesis_analytics_application",
            "aws_kinesis_stream",
            "aws_kinesis_firehose_delivery_stream",
            "aws_kinesis_video_stream",
            "aws_lambda_alias",
            "aws_lambda_event_source_mapping",
            "aws_lambda_function",
            "aws_lambda_function_event_invoke_config",
            "aws_lambda_layer_version",
            "aws_lambda_permission",
            "aws_lambda_provisioned_concurrency_config",
            "aws_licensemanager_association",
            "aws_licensemanager_license_configuration",
            "aws_lightsail_domain",
            "aws_lightsail_instance",
            "aws_lightsail_key_pair",
            "aws_lightsail_static_ip",
            "aws_lightsail_static_ip_attachment",
            "aws_mq_broker",
            "aws_mq_configuration",
            "aws_macie_member_account_association",
            "aws_macie_s3_bucket_association",
            "aws_msk_cluster",
            "aws_msk_configuration",
            "aws_media_convert_queue",
            "aws_media_package_channel",
            "aws_media_store_container",
            "aws_media_store_container_policy",
            "aws_neptune_cluster",
            "aws_neptune_cluster_instance",
            "aws_neptune_cluster_parameter_group",
            "aws_neptune_cluster_snapshot",
            "aws_neptune_event_subscription",
            "aws_neptune_parameter_group",
            "aws_neptune_subnet_group",
            "aws_opsworks_application",
            "aws_opsworks_custom_layer",
            "aws_opsworks_ganglia_layer",
            "aws_opsworks_haproxy_layer",
            "aws_opsworks_instance",
            "aws_opsworks_java_app_layer",
            "aws_opsworks_memcached_layer",
            "aws_opsworks_mysql_layer",
            "aws_opsworks_nodejs_app_layer",
            "aws_opsworks_permission",
            "aws_opsworks_php_app_layer",
            "aws_opsworks_rails_app_layer",
            "aws_opsworks_rds_db_instance",
            "aws_opsworks_stack",
            "aws_opsworks_static_web_layer",
            "aws_opsworks_user_profile",
            "aws_organizations_account",
            "aws_organizations_organization",
            "aws_organizations_organizational_unit",
            "aws_organizations_policy",
            "aws_organizations_policy_attachment",
            "aws_pinpoint_adm_channel",
            "aws_pinpoint_apns_channel",
            "aws_pinpoint_apns_sandbox_channel",
            "aws_pinpoint_apns_voip_channel",
            "aws_pinpoint_apns_voip_sandbox_channel",
            "aws_pinpoint_app",
            "aws_pinpoint_baidu_channel",
            "aws_pinpoint_email_channel",
            "aws_pinpoint_event_stream",
            "aws_pinpoint_gcm_channel",
            "aws_pinpoint_sms_channel",
            "aws_qldb_ledger",
            "aws_quicksight_group",
            "aws_quicksight_user",
            "aws_ram_principal_association",
            "aws_ram_resource_association",
            "aws_ram_resource_share",
            "aws_ram_resource_share_accepter",
            "aws_db_cluster_snapshot",
            "aws_db_event_subscription",
            "aws_db_instance",
            "aws_db_instance_role_association",
            "aws_db_option_group",
            "aws_db_parameter_group",
            "aws_db_security_group",
            "aws_db_snapshot",
            "aws_db_subnet_group",
            "aws_rds_cluster",
            "aws_rds_cluster_endpoint",
            "aws_rds_cluster_instance",
            "aws_rds_cluster_parameter_group",
            "aws_rds_global_cluster",
            "aws_redshift_cluster",
            "aws_redshift_event_subscription",
            "aws_redshift_parameter_group",
            "aws_redshift_security_group",
            "aws_redshift_snapshot_copy_grant",
            "aws_redshift_snapshot_schedule",
            "aws_redshift_snapshot_schedule_association",
            "aws_redshift_subnet_group",
            "aws_resourcegroups_group",
            "aws_route53_delegation_set",
            "aws_route53_health_check",
            "aws_route53_query_log",
            "aws_route53_record",
            "aws_route53_zone",
            "aws_route53_zone_association",
            "aws_route53_resolver_endpoint",
            "aws_route53_resolver_rule",
            "aws_route53_resolver_rule_association",
            "aws_s3_access_point",
            "aws_s3_account_public_access_block",
            "aws_s3_bucket",
            "aws_s3_bucket_analytics_configuration",
            "aws_s3_bucket_inventory",
            "aws_s3_bucket_metric",
            "aws_s3_bucket_notification",
            "aws_s3_bucket_object",
            "aws_s3_bucket_policy",
            "aws_s3_bucket_public_access_block",
            "aws_ses_active_receipt_rule_set",
            "aws_ses_configuration_set",
            "aws_ses_domain_dkim",
            "aws_ses_domain_identity",
            "aws_ses_domain_identity_verification",
            "aws_ses_domain_mail_from",
            "aws_ses_email_identity",
            "aws_ses_event_destination",
            "aws_ses_identity_notification_topic",
            "aws_ses_identity_policy",
            "aws_ses_receipt_filter",
            "aws_ses_receipt_rule",
            "aws_ses_receipt_rule_set",
            "aws_ses_template",
            "aws_sns_platform_application",
            "aws_sns_sms_preferences",
            "aws_sns_topic",
            "aws_sns_topic_policy",
            "aws_sns_topic_subscription",
            "aws_sqs_queue",
            "aws_sqs_queue_policy",
            "aws_ssm_activation",
            "aws_ssm_association",
            "aws_ssm_document",
            "aws_ssm_maintenance_window",
            "aws_ssm_maintenance_window_target",
            "aws_ssm_maintenance_window_task",
            "aws_ssm_parameter",
            "aws_ssm_patch_baseline",
            "aws_ssm_patch_group",
            "aws_ssm_resource_data_sync",
            "aws_swf_domain",
            "aws_sagemaker_endpoint",
            "aws_sagemaker_endpoint_configuration",
            "aws_sagemaker_model",
            "aws_sagemaker_notebook_instance",
            "aws_sagemaker_notebook_instance_lifecycle_configuration",
            "aws_secretsmanager_secret",
            "aws_secretsmanager_secret_rotation",
            "aws_secretsmanager_secret_version",
            "aws_securityhub_account",
            "aws_securityhub_member",
            "aws_securityhub_product_subscription",
            "aws_securityhub_standards_subscription",
            "aws_servicecatalog_portfolio",
            "aws_service_discovery_http_namespace",
            "aws_service_discovery_private_dns_namespace",
            "aws_service_discovery_public_dns_namespace",
            "aws_service_discovery_service",
            "aws_servicequotas_service_quota",
            "aws_shield_protection",
            "aws_simpledb_domain",
            "aws_sfn_activity",
            "aws_sfn_state_machine",
            "aws_storagegateway_cache",
            "aws_storagegateway_cached_iscsi_volume",
            "aws_storagegateway_gateway",
            "aws_storagegateway_nfs_file_share",
            "aws_storagegateway_smb_file_share",
            "aws_storagegateway_upload_buffer",
            "aws_storagegateway_working_storage",
            "aws_transfer_server",
            "aws_transfer_ssh_key",
            "aws_transfer_user",
            "aws_customer_gateway",
            "aws_default_network_acl",
            "aws_default_route_table",
            "aws_default_security_group",
            "aws_default_subnet",
            "aws_default_vpc",
            "aws_default_vpc_dhcp_options",
            "aws_egress_only_internet_gateway",
            "aws_flow_log",
            "aws_internet_gateway",
            "aws_main_route_table_association",
            "aws_nat_gateway",
            "aws_network_acl",
            "aws_network_acl_rule",
            "aws_network_interface",
            "aws_network_interface_attachment",
            "aws_network_interface_sg_attachment",
            "aws_route",
            "aws_route_table",
            "aws_route_table_association",
            "aws_security_group",
            "aws_security_group_rule",
            "aws_subnet",
            "aws_vpc",
            "aws_vpc_dhcp_options",
            "aws_vpc_dhcp_options_association",
            "aws_vpc_endpoint",
            "aws_vpc_endpoint_connection_notification",
            "aws_vpc_endpoint_route_table_association",
            "aws_vpc_endpoint_service",
            "aws_vpc_endpoint_service_allowed_principal",
            "aws_vpc_endpoint_subnet_association",
            "aws_vpc_ipv4_cidr_block_association",
            "aws_vpc_peering_connection",
            "aws_vpc_peering_connection_accepter",
            "aws_vpc_peering_connection_options",
            "aws_vpn_connection",
            "aws_vpn_connection_route",
            "aws_vpn_gateway",
            "aws_vpn_gateway_attachment",
            "aws_vpn_gateway_route_propagation",
            "aws_waf_byte_match_set",
            "aws_waf_geo_match_set",
            "aws_waf_ipset",
            "aws_waf_rate_based_rule",
            "aws_waf_regex_match_set",
            "aws_waf_regex_pattern_set",
            "aws_waf_rule",
            "aws_waf_rule_group",
            "aws_waf_size_constraint_set",
            "aws_waf_sql_injection_match_set",
            "aws_waf_web_acl",
            "aws_waf_xss_match_set",
            "aws_wafregional_byte_match_set",
            "aws_wafregional_geo_match_set",
            "aws_wafregional_ipset",
            "aws_wafregional_rate_based_rule",
            "aws_wafregional_regex_match_set",
            "aws_wafregional_regex_pattern_set",
            "aws_wafregional_rule",
            "aws_wafregional_rule_group",
            "aws_wafregional_size_constraint_set",
            "aws_wafregional_sql_injection_match_set",
            "aws_wafregional_web_acl",
            "aws_wafregional_web_acl_association",
            "aws_wafregional_xss_match_set",
            "aws_wafv2_ip_set",
            "aws_wafv2_regex_pattern_set",
            "aws_wafv2_rule_group",
            "aws_wafv2_web_acl",
            "aws_wafv2_web_acl_association",
            "aws_wafv2_web_acl_logging_configuration",
            "aws_worklink_fleet",
            "aws_worklink_website_certificate_authority_association",
            "aws_workspaces_directory",
            "aws_workspaces_ip_group",
            "aws_workspaces_workspace",
            "aws_xray_sampling_rule",
            "aws_route53_vpc_association_authorization"
        ]
    }
}

if os.path.exists(resource_type_file_name):
    # If the file exists, open and read the JSON data
    with open(resource_type_file_name, 'r') as file:
        try:
            resource_types_to_check = json.load(file)
        except:
            resource_types_to_check = default_resources_types
else:
    # If the file doesn't exist, use the default dictionary
    resource_types_to_check = default_resources_types

check = MetadataPairChecker(metadata_to_check, resource_types_to_check)
